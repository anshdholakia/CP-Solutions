class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # Union find to find the components
        # We will choose the components with only one initial
        # Choose the initial with the highest rank then
        parent = [i for i in range(len(graph))]
        rank = [1]*len(graph)
        def union(a,b):
            p1, p2 = find(a), find(b)
            if p1==p2:
                return
            if rank[p1]>rank[p2]:
                parent[p2]=p1
                rank[p1]+=rank[p2]
            else:
                parent[p1]=p2
                rank[p2]+=rank[p1]
        def find(n):
            while n!=parent[n]:
                parent[n]=parent[parent[n]]
                n=parent[n]
            return n
        for i in range(len(graph)):
            for j in range(len(graph)):
                if i!=j and graph[i][j]:
                    union(i, j)
        components=defaultdict(int)
        parent_of_initial=defaultdict(int)
        for i in initial:
            par=find(i)
            components[par]+=1
            parent_of_initial[par]=i
        filtered_components=[i for i in components if components[i]==1]
        if not filtered_components:
            return min(initial)
        max_res, max_size = None, -inf
        for i in filtered_components:
            if rank[i]>max_size:
                max_size=rank[i]
                max_res=parent_of_initial[i]
            elif rank[i]==max_size:
                max_res=min(max_res, parent_of_initial[i])
        return max_res
        